**These notes are for my personal understanding. If they help you, I'm glad!**
-The basic lifetime of a shell
	-What does a shell do within its lifetime?
		-1. Initialize
			-Here, a shell reads and execustes its configuration files. These change the aspects of the shell's behavior. 
		-2. Interpret
			-Here, the shell reads commands from stdin (which could come from user-input or a file) and exexecutes them.
		-3. Terminate
			-After the shell's commands are executed, it additionally executes any shutdown commands, frees up any memory, and terminates.
-Basic code of the program
	-Getting user input:
		-In C, you do not know how many arguments a user will pass to the input ahead of time
			-Therefore, you need to start with a block to contain user input, and if they exceed it, you need to 
			reallocate with more space.
			-You need to create a function which returns a pointer to this block (as though it were a char array), malloc
			the initial size of the block (the size will be a macro set to 1024), and realloc the pointer 
			to the beginning of the char array to a larger block when your position counter exceeds the current size of the 
			block
			-Moreover, you need to take each character as input using the getChar function, and take each char as an int
			(so we can check for EOF, which itself is an int); we also need to check for '\n' characters
				-If we reach either value, append the '\0' delimiter to the char array and return the pointer to the beginning
	 -Tokenizing input
		-For the time being, we will only accept words or characters as arguments, not quotes or slashes
		-We will split on whitespaces
	-mysh_split_line: function for tokenizing/splitting char buffer data returned by mysh_read_line
		-Similar approach to mysh_read_line: use malloc to allocate a block of a preset size, then dynamically allocate more 
		memory if the position pointer exceeds the given space
		-When tokenizing the input, we will ultimately return an array of pointers (hence the return type of **, a pointer to 
		a pointer) 
		-Note: strtok also appends a delimiter character '\0' to the end of each word it splits from the original input
-The shell part: beyond parsing
	-Main function of shells: starting processes
	-Two ways of starting processes:
		-1. Being Init
			-Init: the process which the unix kernel loads and executes when the computer boots, runs for however long
			the computer is operating
		-2. The fork() system call
			-When this is called, the operating system makes a duplicate of the current process and runs them both (original 
			is the parent, new is called the child process)
			-fork() returns 0 to the child process and the process ID number (PID) of the child to the parent 
				-Therefore, the only way for a new process to start is by an existing one duplicating itself
			-However, what if we want to do more than just clone the current process?
				-Here, we can make use of the exec() system call, which replaces the currently-running program with
				an entirely new one 
				-When a call to exec() is made, the current process stops running and loads up the new one
					-a process never returns from a call made to exec()
		-Therefore, the building blocks of how most programs are run on Unix consists of a program forking a duplicate of itself,
		then using exec to run a different process in the place of its child process 
		-The parent process can do other things and monitor the child process with the use of the system call wait()
-mysh_launch
	-takes the list of arguments tokenized and passed in earlier 
	-forks the current process running and saves the return value
	-in the child process returned by the call to fork(), we want to run the command given by the user 	
		-to do this, we use execvp, which is a variant of the exec system call 
			-execvp(): expects a program name and an array (called a vector) 
				-if the call returns -1, we know there was an error with execvp and return an appropriate error message
	-if the call to fork returns a value < 0, we know there was an error in the call to fork() and print an error message
	-third condition occurs when the call to fork() works
		-in this instance, the parent process will land within the do-while loop and wait for the child process to conclude
		-here, we use waitpid() to wait for the process's state to change 
			-as waitpid() has many different configurations, we use the macros given by waitpid() to determine whether 
			or not the child process has finished completing (when it either exits or is killed) 
			-mysh_launch will return a 1 ultimately to signal that we can give it more input 
-shell builtins
	-most commands a shell executes are programs, but not all of them, some are built directly into the shell
	-therefore, we need to define a few built-in shell functions (cd, help, exit) and implement them with system calls
-builtin_func[] is defined as an array of function pointers (the functions all take a string and return an int)
